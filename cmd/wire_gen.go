// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/HaroldoFV/desafio/configs"
	"github.com/HaroldoFV/desafio/internal/domain"
	"github.com/HaroldoFV/desafio/internal/gateway"
	aws2 "github.com/HaroldoFV/desafio/internal/infra/aws"
	"github.com/HaroldoFV/desafio/internal/infra/database"
	"github.com/HaroldoFV/desafio/internal/infra/web"
	"github.com/HaroldoFV/desafio/internal/infra/web/webserver"
	"github.com/HaroldoFV/desafio/internal/usecase"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/credentials"
	"github.com/aws/aws-sdk-go-v2/service/rekognition"
)

import (
	_ "github.com/HaroldoFV/desafio/docs"
)

// Injectors from wire.go:

func InitializeApplication(config *configs.Conf) (*Application, error) {
	webServer := provideWebServer(config)
	db, err := provideDB(config)
	if err != nil {
		return nil, err
	}
	gyroscopeRepositoryInterface := provideGyroscopeRepository(db)
	createGyroscopeUseCaseInterface := provideCreateGyroscopeUseCase(gyroscopeRepositoryInterface)
	gyroscopeHandler := provideGyroscopeHandler(createGyroscopeUseCaseInterface)
	gpsRepositoryInterface := provideGPSRepository(db)
	createGPSUseCaseInterface := provideCreateGPSUseCase(gpsRepositoryInterface)
	gpsHandler := provideGPSHandler(createGPSUseCaseInterface)
	photoRepositoryInterface := providePhotoRepository(db)
	awsConfig, err := provideAWSConfig(config)
	if err != nil {
		return nil, err
	}
	client := NewRekognitionClient(awsConfig)
	faceRecognizerInterface := provideRekognitionFaceRecognizer(client, config)
	createPhotoUseCaseInterface := provideCreatePhotoUseCase(photoRepositoryInterface, faceRecognizerInterface, config)
	photoHandler := providePhotoHandler(createPhotoUseCaseInterface)
	application := &Application{
		WebServer:        webServer,
		GyroscopeHandler: gyroscopeHandler,
		GPSHandler:       gpsHandler,
		PhotoHandler:     photoHandler,
	}
	return application, nil
}

// wire.go:

type Application struct {
	WebServer        *webserver.WebServer
	GyroscopeHandler *web.GyroscopeHandler
	GPSHandler       *web.GPSHandler
	PhotoHandler     *web.PhotoHandler
}

func provideDB(config *configs.Conf) (*sql.DB, error) {
	return sql.Open(config.DBDriver, fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		config.DBHost, config.DBPort, config.DBUser, config.DBPassword, config.DBName))
}

func provideWebServer(config *configs.Conf) *webserver.WebServer {
	return webserver.NewWebServer(":" + config.WebServerPort)
}

func provideGyroscopeRepository(db *sql.DB) domain.GyroscopeRepositoryInterface {
	return database.NewGyroscopeRepository(db)
}

func provideGPSRepository(db *sql.DB) domain.GPSRepositoryInterface {
	return database.NewGPSRepository(db)
}

func providePhotoRepository(db *sql.DB) domain.PhotoRepositoryInterface {
	return database.NewPhotoRepository(db)
}

func provideAWSConfig(conf *configs.Conf) (aws.Config, error) {
	return config.LoadDefaultConfig(context.TODO(), config.WithRegion(conf.AWSRegion), config.WithCredentialsProvider(credentials.NewStaticCredentialsProvider(
		conf.AWSAccessKeyID,
		conf.AWSSecretAccessKey,
		"",
	)),
	)
}

func NewRekognitionClient(cfg aws.Config) *rekognition.Client {
	return rekognition.NewFromConfig(cfg)
}

func provideRekognitionFaceRecognizer(client *rekognition.Client, config2 *configs.Conf) gateway.FaceRecognizerInterface {
	return aws2.NewRekognitionFaceRecognizer(client, config2.AWSRekognitionCollectionID)
}

func provideCreateGyroscopeUseCase(repo domain.GyroscopeRepositoryInterface) usecase.CreateGyroscopeUseCaseInterface {
	return usecase.NewCreateGyroscopeUseCase(repo)
}

func provideCreateGPSUseCase(repo domain.GPSRepositoryInterface) usecase.CreateGPSUseCaseInterface {
	return usecase.NewCreateGPSUseCase(repo)
}

func provideCreatePhotoUseCase(repo domain.PhotoRepositoryInterface, faceRecognizer gateway.FaceRecognizerInterface, config2 *configs.Conf) usecase.CreatePhotoUseCaseInterface {
	return usecase.NewCreatePhotoUseCase(repo, faceRecognizer, config2)
}

func provideGyroscopeHandler(useCase usecase.CreateGyroscopeUseCaseInterface) *web.GyroscopeHandler {
	return web.NewGyroscopeHandler(useCase)
}

func provideGPSHandler(useCase usecase.CreateGPSUseCaseInterface) *web.GPSHandler {
	return web.NewGPSHandler(useCase)
}

func providePhotoHandler(useCase usecase.CreatePhotoUseCaseInterface) *web.PhotoHandler {
	return web.NewPhotoHandler(useCase)
}
