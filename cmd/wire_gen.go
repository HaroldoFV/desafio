// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"fmt"
	"github.com/HaroldoFV/desafio/configs"
	"github.com/HaroldoFV/desafio/internal/domain"
	"github.com/HaroldoFV/desafio/internal/infra/database"
	"github.com/HaroldoFV/desafio/internal/infra/web"
	"github.com/HaroldoFV/desafio/internal/infra/web/webserver"
	"github.com/HaroldoFV/desafio/internal/usecase"
)

import (
	_ "github.com/HaroldoFV/desafio/docs"
)

// Injectors from wire.go:

func InitializeApplication(config *configs.Conf) (*Application, error) {
	webServer := provideWebServer(config)
	db, err := provideDB(config)
	if err != nil {
		return nil, err
	}
	gyroscopeRepositoryInterface := provideGyroscopeRepository(db)
	createGyroscopeUseCase := usecase.NewCreateGyroscopeUseCase(gyroscopeRepositoryInterface)
	gyroscopeHandler := web.NewGyroscopeHandler(createGyroscopeUseCase, gyroscopeRepositoryInterface)
	gpsRepositoryInterface := provideGPSRepository(db)
	createGPSUseCase := usecase.NewCreateGPSUseCase(gpsRepositoryInterface)
	gpsHandler := web.NewGPSHandler(createGPSUseCase, gpsRepositoryInterface)
	photoRepositoryInterface := providePhotoRepository(db)
	string2 := providePhotoStoragePath(config)
	createPhotoUseCase := usecase.NewCreatePhotoUseCase(photoRepositoryInterface, string2)
	photoHandler := web.NewPhotoHandler(createPhotoUseCase)
	application := &Application{
		WebServer:        webServer,
		GyroscopeHandler: gyroscopeHandler,
		GPSHandler:       gpsHandler,
		PhotoHandler:     photoHandler,
	}
	return application, nil
}

// wire.go:

type Application struct {
	WebServer        *webserver.WebServer
	GyroscopeHandler *web.GyroscopeHandler
	GPSHandler       *web.GPSHandler
	PhotoHandler     *web.PhotoHandler
}

func provideDB(config *configs.Conf) (*sql.DB, error) {
	return sql.Open(config.DBDriver, fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		config.DBHost, config.DBPort, config.DBUser, config.DBPassword, config.DBName))
}

func provideWebServer(config *configs.Conf) *webserver.WebServer {
	return webserver.NewWebServer(":" + config.WebServerPort)
}

func provideGyroscopeRepository(db *sql.DB) domain.GyroscopeRepositoryInterface {
	return database.NewGyroscopeRepository(db)
}

func provideGPSRepository(db *sql.DB) domain.GPSRepositoryInterface {
	return database.NewGPSRepository(db)
}

func providePhotoRepository(db *sql.DB) domain.PhotoRepositoryInterface {
	return database.NewPhotoRepository(db)
}

func providePhotoStoragePath(config *configs.Conf) string {
	return config.PhotoStoragePath
}
